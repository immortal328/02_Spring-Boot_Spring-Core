Spring Container:
	- Special type spring object which help us to configure spring setup.
	
	Primary functions are:
		1. Inversion Of Control (IoC) - Creating and management of Object.
		2. Dependency Injection - Inject Object Dependencies.
		
Dependency Injection:
	1. Constructor Injection: - for requaired dependecies
	2. Setter Injection: - for optional dependencies
	3. Field Injection: - define private variable and just give @Autowired on top of it.
	
@SpringBootApplication is combination of:
	- @ComponentScan -> enable component scanning for current packages and recursively scan sub-packages
	- @Configuration -> Able to register extra beans with @Bean / import other configuration classess
	- @EnableAutoConfiguration -> Enable Spring Boot auto configuration support.
	
	SpringApplication.run() -> create application Context and register all beans & start tomcat server	
	
@ComponentScan
	- Start by default scanning component from base package , means from main method package
	- After that recursively scan sub-packages
	
	To scan package outside base package;
		@SpringBootApplication(scanBasePackages={"com.root.immortal",
												 "com.bus"}
								)			
Qualifiers:
	- If we have multiple classes which implements single interface that time @Qualifier("qualifierName") annotation is useful
	  to let know spring which Bean need to inject.
	  
@Primary:
	When we have multiple classes which implements single interface then we can only one as @Primary 
	
Lazy Initilization:
	@Lazy:
		- It will only Initilize When it needed or Explicitly initilize
		- fine when we have less classes but cause problem when have larger number of classes
		then its problem ?
	Solution:
		- Global Configuration:
			spring.main.lazy-initialization = true
			
Beans Scope: scope = life-cycle ,Default Scope --> singleton
	What is singleton:
		- Spring container create only one instance of the beans, cached it and refer same bean
	- how long bean live ?
	- how many instance created?
	- how bean shared?
	
	@Scope annotation to define scope of bean
	 -> @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)
	 Type of scope : singleton, prototype, request, session, application, websocket
	 
	 Note : Prototype beans are lazy by default. There is no need to use the @Lazy annotation for prototype scopes beans
	 
Bean LifeCycle method:
	- @PostConstract
	- @PreDestroy
	
@java config Bean
	@Bean
		-> if you have class in project then you can use @Component to crate beans
			but, what about if you have third-party class , then time you can use @Bean and make that class available as Spring Bean
	How to create java config bean:
		1. create class #Configuration
		2. Add method with @Bean 
		3. return with new keyword.
		4. Add Qualifier name as @Bean Method name
	
